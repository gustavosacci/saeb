document.addEventListener('DOMContentLoaded', () => {
    // Log para confirmar que o script foi carregado e o DOM est√° pronto.
    console.log('‚úÖ DOM Content Loaded! Script main.js iniciado.');

    // --- Vari√°veis de elementos DOM ---
    // Seletores para elementos chave do layout.
    const menuToggle = document.querySelector('.menu-toggle'); // Bot√£o do menu hamb√∫rguer
    const mainNav = document.querySelector('.main-nav');       // Elemento de navega√ß√£o principal
    const navLinks = document.querySelectorAll('.nav-list .nav-link'); // Links dentro da navega√ß√£o
    const allAnchorLinks = document.querySelectorAll('a[href^="#"]'); // Todos os links com √¢ncoras (ex: #descritores)

    // Seletores para as se√ß√µes de conte√∫do din√¢mico.
    const contentSections = document.querySelectorAll('.content-section'); // Se√ß√µes de conte√∫do de cada descritor (e Sobre/Contato)
    const descritoresSection = document.getElementById('descritores');   // A se√ß√£o principal de vis√£o geral dos descritores

    // Verifica√ß√µes iniciais para elementos essenciais.
    if (!descritoresSection) {
        console.error('‚ùå Erro cr√≠tico: Elemento #descritores n√£o encontrado. Verifique seu HTML.');
        return; // O script pode n√£o funcionar corretamente sem este elemento.
    }
    if (contentSections.length === 0) {
        console.warn('‚ö†Ô∏è Aten√ß√£o: Nenhuma se√ß√£o com a classe .content-section encontrada. O conte√∫do dos descritores pode n√£o ser exibido.');
    }

    // --- Fun√ß√£o Auxiliar: Obter Valores de Vari√°veis CSS ---
    // Permite que o JavaScript leia valores definidos no CSS (ex: cores).
    const getCssVar = (name) => {
        return getComputedStyle(document.documentElement).getPropertyValue(name).trim();
    };

    // --- 1. Menu Responsivo (Hamburger) ---
    // Ativa a funcionalidade do menu hamb√∫rguer para telas menores.
    if (menuToggle && mainNav) {
        menuToggle.addEventListener('click', () => {
            console.log('‚ö° Menu toggle clicado!');
            mainNav.classList.toggle('nav-open');    // Adiciona/remove classe para abrir/fechar o menu
            menuToggle.classList.toggle('active');   // Altera o √≠cone do hamb√∫rguer (anima√ß√£o)
            const isExpanded = menuToggle.classList.contains('active');
            menuToggle.setAttribute('aria-expanded', isExpanded); // Atualiza atributo de acessibilidade
        });

        // Fecha o menu ao clicar em um link (melhora a usabilidade em mobile).
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                if (mainNav.classList.contains('nav-open')) {
                    mainNav.classList.remove('nav-open');
                    menuToggle.classList.remove('active');
                    menuToggle.setAttribute('aria-expanded', false);
                }
            });
        });
    } else {
        console.warn('‚ö†Ô∏è Aviso: Bot√£o do menu (.menu-toggle) ou navega√ß√£o principal (.main-nav) n√£o encontrados. O menu responsivo pode n√£o funcionar.');
    }

    // --- 2. Rolagem Suave (Smooth Scrolling) ---
    // Implementa rolagem suave ao clicar em links de √¢ncora na mesma p√°gina.
    allAnchorLinks.forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            const href = this.getAttribute('href');
            // Procede apenas se o link for uma √¢ncora local (come√ßa com '#').
            if (href.startsWith('#')) {
                e.preventDefault(); // Impede o comportamento padr√£o de "salto" instant√¢neo.
                console.log('üîó Link de rolagem suave clicado:', href);

                const header = document.querySelector('header');
                const headerHeight = header ? header.offsetHeight : 0; // Obt√©m altura do cabe√ßalho para compensar.
                const targetElement = document.querySelector(href); // Encontra o elemento alvo da √¢ncora.

                if (targetElement) {
                    // Calcula a posi√ß√£o de rolagem ajustada pela altura do cabe√ßalho e um offset visual.
                    const offsetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight - 20;

                    // Realiza a rolagem suave.
                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });
                } else {
                    console.warn(`‚ö†Ô∏è Elemento alvo para rolagem suave n√£o encontrado: ${href}`);
                }
            }
        });
    });

    // --- 3. L√≥gica para Mostrar/Esconder Se√ß√µes de Conte√∫do dos Descritores ---

    // Fun√ß√£o para mostrar uma se√ß√£o espec√≠fica de conte√∫do e esconder todas as outras.
    const showContentSection = (targetId) => {
        console.log(`‚û°Ô∏è Tentando mostrar a se√ß√£o: ${targetId}`);
        // Esconde todas as se√ß√µes de conte√∫do marcadas com '.content-section'.
        contentSections.forEach(section => {
            section.style.display = 'none';
        });

        const targetSection = document.querySelector(targetId);
        if (targetSection) {
            targetSection.style.display = 'block'; // Mostra a se√ß√£o alvo.
            console.log(`‚úÖ Se√ß√£o ${targetId} agora vis√≠vel.`);
        } else {
            console.error(`‚ùå Erro: N√£o foi poss√≠vel encontrar a se√ß√£o alvo: ${targetId}. Verifique se o ID est√° correto no HTML.`);
        }
        // Garante que a se√ß√£o principal de descritores seja escondida.
        descritoresSection.style.display = 'none';
    };

    // Fun√ß√£o para mostrar a se√ß√£o de vis√£o geral dos descritores e esconder as se√ß√µes de conte√∫do.
    const showDescritoresOverview = () => {
        console.log('‚¨ÖÔ∏è Mostrando a vis√£o geral dos descritores e escondendo conte√∫do.');
        contentSections.forEach(section => {
            section.style.display = 'none';
        });
        descritoresSection.style.display = 'block'; // Mostra a se√ß√£o principal.
    };

    // Estado inicial ao carregar a p√°gina: mostra a vis√£o geral dos descritores.
    showDescritoresOverview();

    // Event listeners para os bot√µes "Explorar DXX" nos cards de descritores.
    document.querySelectorAll('.card-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault(); // Impede o comportamento padr√£o do link.
            const targetId = this.getAttribute('href'); // Obt√©m o ID da se√ß√£o alvo.
            console.log('üñ±Ô∏è Bot√£o "Explorar DXX" clicado. Alvo:', targetId);
            showContentSection(targetId); // Exibe a se√ß√£o de conte√∫do do descritor.
            // Pequeno atraso para garantir que a se√ß√£o esteja vis√≠vel antes de rolar.
            setTimeout(() => {
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            }, 50);
        });
    });

    // Event listeners para os bot√µes "Voltar para os Descritores" dentro das se√ß√µes de conte√∫do.
    document.querySelectorAll('.btn-back').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('‚Ü©Ô∏è Bot√£o "Voltar para os Descritores" clicado.');
            showDescritoresOverview(); // Volta para a vis√£o geral dos descritores.
            // Rola suavemente para a se√ß√£o de descritores.
            const targetElement = document.querySelector(this.getAttribute('href'));
            if (targetElement) {
                targetElement.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });

    // L√≥gica para links do menu superior 'Sobre N√≥s' e 'Contato'.
    // Estes links tamb√©m controlam a exibi√ß√£o de se√ß√µes '.content-section'.
    document.querySelectorAll('.main-nav .nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            const href = this.getAttribute('href');
            // Verifica se o link √© para as se√ß√µes 'Sobre N√≥s' ou 'Contato'.
            if (href === '#about' || href === '#contact') {
                e.preventDefault(); // Impede o comportamento padr√£o do link.
                console.log(`Clicked link de navega√ß√£o: ${href}`);
                showContentSection(href); // Mostra a se√ß√£o de contato/sobre.
                // Pequeno atraso para rolagem suave.
                setTimeout(() => {
                    document.querySelector(href).scrollIntoView({ behavior: 'smooth' });
                }, 50);
            }
            // Se o link for para '#descritores', garante que a vis√£o geral seja exibida.
            else if (href === '#descritores') {
                showDescritoresOverview();
            }
        });
    });

    // --- 4. Anima√ß√µes de Elementos ao Rolar (Intersection Observer) ---
    // Gerencia a adi√ß√£o de classes para anima√ß√µes quando elementos entram na viewport.
    const animatedElements = document.querySelectorAll('.animate-slide-up, .animate-fade-in, .animate-pulse');
    const observerOptions = {
        root: null,      // O viewport √© o elemento raiz.
        rootMargin: '0px', // Nenhuma margem extra.
        threshold: 0.1   // A anima√ß√£o dispara quando 10% do elemento est√° vis√≠vel.
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animation-active');
                // Para anima√ß√µes que devem ocorrer apenas uma vez (ex: entrada na tela).
                if (entry.target.classList.contains('animate-slide-up') || entry.target.classList.contains('animate-fade-in')) {
                    observer.unobserve(entry.target); // Deixa de observar o elemento.
                }
            }
        });
    }, observerOptions);

    // Observa cada elemento com as classes de anima√ß√£o.
    if (animatedElements.length > 0) {
        animatedElements.forEach(element => {
            observer.observe(element);
        });
    } else {
        console.warn('‚ö†Ô∏è Aviso: Nenhum elemento encontrado para anima√ß√£o de rolagem. Verifique as classes CSS de anima√ß√£o.');
    }

    // --- 5. L√≥gica dos Quizzes para os 3 Descritores ---
    // Dados das perguntas para cada quiz, organizados por ID do quiz.
    const quizzesData = {
        'quiz-d01': [
            {
                question: "No trecho: 'A polui√ß√£o pl√°stica nos oceanos √© um problema grave que exige a√ß√£o imediata de governos e cidad√£os.', qual a tese principal?",
                options: [
                    "Oceanos est√£o polu√≠dos por pl√°stico.",
                    "Governos e cidad√£os devem agir contra a polui√ß√£o pl√°stica nos oceanos.",
                    "A polui√ß√£o pl√°stica √© um problema s√©rio.",
                    "A√ß√£o imediata √© necess√°ria."
                ],
                correct: "Governos e cidad√£os devem agir contra a polui√ß√£o pl√°stica nos oceanos."
            },
            {
                question: "Ao ler uma not√≠cia sobre os benef√≠cios da leitura, qual seria a prov√°vel tese do texto?",
                options: [
                    "Livros s√£o caros.",
                    "Pessoas que leem s√£o mais inteligentes.",
                    "A leitura traz diversos benef√≠cios para o desenvolvimento pessoal.",
                    "√â importante ler todos os dias."
                ],
                correct: "A leitura traz diversos benef√≠cios para o desenvolvimento pessoal."
            },
            {
                question: "Qual a tese central da frase 'O uso excessivo de redes sociais pode prejudicar a sa√∫de mental dos adolescentes'?",
                options: [
                    "Adolescentes usam muito redes sociais.",
                    "Redes sociais s√£o ruins.",
                    "O uso excessivo de redes sociais impacta negativamente a sa√∫de mental dos adolescentes.",
                    "A sa√∫de mental dos adolescentes √© fr√°gil."
                ],
                correct: "O uso excessivo de redes sociais impacta negativamente a sa√∫de mental dos adolescentes."
            }
        ],
        'quiz-d02': [
            {
                question: "Qual conectivo melhor completa a frase: 'Estudei muito, ____ passei na prova.'?",
                options: [
                    "portanto",
                    "mas",
                    "embora",
                    "porque"
                ],
                correct: "portanto"
            },
            {
                question: "Na frase 'Ele n√£o compareceu √† reuni√£o, pois estava doente.', a palavra 'pois' indica:",
                options: [
                    "Consequ√™ncia",
                    "Compara√ß√£o",
                    "Explica√ß√£o",
                    "Oposi√ß√£o"
                ],
                correct: "Explica√ß√£o"
            },
            {
                question: "Em 'Adoro viajar; no entanto, prefiro lugares tranquilos.', 'no entanto' estabelece uma rela√ß√£o de:",
                options: [
                    "Adi√ß√£o",
                    "Causa",
                    "Conclus√£o",
                    "Oposi√ß√£o"
                ],
                correct: "Oposi√ß√£o"
            }
        ],
        'quiz-d03': [
            {
                question: "Se algu√©m diz que uma pessoa √© 'prolixa', usando o contexto 'Sua fala era t√£o prolixa que cansou a todos', o que 'prolixa' provavelmente significa?",
                options: [
                    "Direta e clara",
                    "Objetiva e concisa",
                    "Com muitos detalhes e palavras desnecess√°rias",
                    "Emocionante e inspiradora"
                ],
                correct: "Com muitos detalhes e palavras desnecess√°rias"
            },
            {
                question: "Na frase 'O atleta exauriu-se ap√≥s a corrida', o que se pode inferir sobre 'exauriu-se'?",
                options: [
                    "Sentiu-se muito feliz",
                    "Ficou sem energia, exausto",
                    "Ganhou a corrida",
                    "Sentiu dor"
                ],
                correct: "Ficou sem energia, exausto"
            },
            {
                question: "A express√£o 'estar com a faca e o queijo na m√£o' significa, por infer√™ncia:",
                options: [
                    "Estar com fome",
                    "Ter todas as ferramentas para ter sucesso",
                    "Ser um cozinheiro habilidoso",
                    "Ter um piquenique"
                ],
                correct: "Ter todas as ferramentas para ter sucesso"
            }
        ]
    };

    // Fun√ß√£o principal para configurar e rodar um quiz espec√≠fico.
    function setupQuiz(quizId, questionsData) {
        const quizContainer = document.getElementById(quizId);
        if (!quizContainer) {
            console.error(`‚ùå Erro: Container do quiz com ID "${quizId}" n√£o encontrado. O quiz n√£o ser√° carregado.`);
            return;
        }
        console.log(`‚öôÔ∏è Inicializando quiz para ID: ${quizId}`); // Log de inicializa√ß√£o do quiz.

        let currentQuestionIndex = 0; // √çndice da pergunta atual.
        let score = 0;                // Pontua√ß√£o do quiz.

        // Renderiza a pergunta atual no quizContainer.
        const renderQuestion = () => {
            quizContainer.innerHTML = ''; // Limpa o conte√∫do anterior do container do quiz.

            const question = questionsData[currentQuestionIndex];
            if (!question) {
                renderResults(); // Se n√£o h√° mais perguntas, exibe os resultados.
                return;
            }

            const quizDiv = document.createElement('div');
            quizDiv.className = 'quiz-container';

            const questionText = document.createElement('p');
            questionText.className = 'quiz-question-text';
            questionText.textContent = `Pergunta ${currentQuestionIndex + 1}/${questionsData.length}: ${question.question}`;
            quizDiv.appendChild(questionText);

            const optionsDiv = document.createElement('div');
            optionsDiv.className = 'quiz-options';
            // Cria um bot√£o para cada op√ß√£o de resposta.
            question.options.forEach((option, index) => {
                const optionButton = document.createElement('button');
                optionButton.className = 'quiz-option-btn';
                optionButton.textContent = option;
                optionButton.dataset.index = index; // Adiciona um atributo de dado para identifica√ß√£o.
                // Adiciona um listener para a fun√ß√£o de tratamento de resposta ao clicar.
                optionButton.addEventListener('click', () => handleAnswer(option, question.correct, optionButton, optionsDiv));
                optionsDiv.appendChild(optionButton);
            });
            quizDiv.appendChild(optionsDiv);

            const feedbackDiv = document.createElement('div');
            feedbackDiv.className = 'quiz-feedback'; // Div para exibir feedback (Correto/Incorreto).
            quizDiv.appendChild(feedbackDiv);

            const nextButton = document.createElement('button');
            nextButton.className = 'quiz-next-btn btn btn-secondary';
            nextButton.textContent = 'Pr√≥xima Pergunta ‚Üí';
            nextButton.style.display = 'none'; // Escondido inicialmente at√© o usu√°rio responder.
            nextButton.addEventListener('click', () => {
                currentQuestionIndex++; // Avan√ßa para a pr√≥xima pergunta.
                renderQuestion();       // Renderiza a pr√≥xima pergunta.
            });
            quizDiv.appendChild(nextButton);

            quizContainer.appendChild(quizDiv);
            console.log(`‚úîÔ∏è Quiz "${quizId}": Pergunta ${currentQuestionIndex + 1} renderizada.`);
        };

        // Trata a resposta do usu√°rio.
        const handleAnswer = (selectedOption, correctAnswer, clickedButton, optionsContainer) => {
            const feedbackDiv = quizContainer.querySelector('.quiz-feedback');
            const nextButton = quizContainer.querySelector('.quiz-next-btn');

            // Desabilita todos os bot√µes de op√ß√£o ap√≥s uma resposta ser dada.
            optionsContainer.querySelectorAll('.quiz-option-btn').forEach(btn => {
                btn.disabled = true;
            });

            if (selectedOption === correctAnswer) {
                score++; // Incrementa a pontua√ß√£o se a resposta estiver correta.
                feedbackDiv.textContent = "Correto! üéâ";
                feedbackDiv.style.color = getCssVar('--color-success'); // Define a cor do feedback via CSS var.
                clickedButton.classList.add('correct'); // Adiciona classe para estilo de resposta correta.
                console.log(`üëç Quiz "${quizId}": Resposta correta.`);
            } else {
                feedbackDiv.textContent = `Incorreto. A resposta correta era: "${correctAnswer}"`;
                feedbackDiv.style.color = getCssVar('--color-error'); // Define a cor do feedback via CSS var.
                clickedButton.classList.add('incorrect'); // Adiciona classe para estilo de resposta incorreta.
                // Destaca a resposta correta para o usu√°rio aprender.
                Array.from(optionsContainer.children).forEach(btn => {
                    if (btn.textContent === correctAnswer) {
                        btn.classList.add('correct-answer-highlight'); // Adiciona classe para destacar a resposta certa.
                    }
                });
                console.log(`üëé Quiz "${quizId}": Resposta incorreta.`);
            }
            nextButton.style.display = 'block'; // Mostra o bot√£o "Pr√≥xima Pergunta".
        };

        // Renderiza os resultados finais do quiz.
        const renderResults = () => {
            quizContainer.innerHTML = ''; // Limpa o quiz atual.

            const resultsDiv = document.createElement('div');
            resultsDiv.className = 'quiz-results';

            const resultTitle = document.createElement('h4');
            resultTitle.textContent = 'Quiz Finalizado!';
            resultsDiv.appendChild(resultTitle);

            const resultText = document.createElement('p');
            resultText.textContent = `Voc√™ acertou ${score} de ${questionsData.length} perguntas.`;
            resultsDiv.appendChild(resultText);

            const restartButton = document.createElement('button');
            restartButton.className = 'quiz-restart-btn btn btn-primary';
            restartButton.textContent = 'Refazer Quiz';
            restartButton.addEventListener('click', () => {
                currentQuestionIndex = 0; // Reseta o √≠ndice da pergunta.
                score = 0;                // Reseta a pontua√ß√£o.
                renderQuestion();         // Reinicia o quiz.
            });
            resultsDiv.appendChild(restartButton);

            quizContainer.appendChild(resultsDiv);
            console.log(`üèÅ Quiz "${quizId}": Finalizado. Pontua√ß√£o: ${score}/${questionsData.length}`);
        };

        // Inicia o quiz ao chamar a fun√ß√£o setupQuiz.
        renderQuestion();
    }

    // Inicializa todos os quizzes existentes na p√°gina.
    // Garante que cada quiz seja configurado com seus dados espec√≠ficos.
    setupQuiz('quiz-d01', quizzesData['quiz-d01']);
    setupQuiz('quiz-d02', quizzesData['quiz-d02']);
    setupQuiz('quiz-d03', quizzesData['quiz-d03']);

    console.log('‚úÖ main.js script finalizado.');
});